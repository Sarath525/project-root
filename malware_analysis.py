import requests
import json
import os
from flask import Flask, request, jsonify, send_from_directory

# API keys (replace with your actual API keys)
VIRUSTOTAL_API_KEY = 'a05026e4699477940a0d99c983748f10f4fc27a942618be5225e633133551d94'
ABUSEIPDB_API_KEY = '32c315cc6f56ade77ba7d5c535b2f3e11c39dc1ee3b927fe23fc2ea5e24db1b87f1a1f95ded100e7'

# VirusTotal API endpoints
VT_URL_SCAN_ENDPOINT = 'https://www.virustotal.com/api/v3/urls'
VT_URL_REPORT_ENDPOINT = 'https://www.virustotal.com/api/v3/analyses'
VT_FILE_SCAN_ENDPOINT = 'https://www.virustotal.com/api/v3/files'

# AbuseIPDB API endpoint
ABUSEIPDB_CHECK_ENDPOINT = 'https://api.abuseipdb.com/api/v2/check'

def scan_url_vt(url):
    headers = {
        'x-apikey': VIRUSTOTAL_API_KEY
    }
    data = {
        'url': url
    }
    response = requests.post(VT_URL_SCAN_ENDPOINT, headers=headers, data=data)
    if response.status_code == 200:
        analysis_id = response.json().get('data').get('id')
        return analysis_id
    else:
        raise Exception(f"Error scanning URL: {response.status_code} {response.text}")

def get_url_report_vt(analysis_id):
    headers = {
        'x-apikey': VIRUSTOTAL_API_KEY
    }
    response = requests.get(f"{VT_URL_REPORT_ENDPOINT}/{analysis_id}", headers=headers)
    if response.status_code == 200:
        return response.json()
    else:
        raise Exception(f"Error retrieving URL report: {response.status_code} {response.text}")

def scan_file_vt(file_path):
    headers = {
        'x-apikey': VIRUSTOTAL_API_KEY
    }
    files = {
        'file': (os.path.basename(file_path), open(file_path, 'rb'))
    }
    response = requests.post(VT_FILE_SCAN_ENDPOINT, headers=headers, files=files)
    if response.status_code == 200:
        analysis_id = response.json().get('data').get('id')
        return analysis_id
    else:
        raise Exception(f"Error scanning file: {response.status_code} {response.text}")

def check_ip_abuseipdb(ip_address):
    headers = {
        'Key': ABUSEIPDB_API_KEY,
        'Accept': 'application/json'
    }
    params = {
        'ipAddress': ip_address,
        'maxAgeInDays': 90
    }
    response = requests.get(ABUSEIPDB_CHECK_ENDPOINT, headers=headers, params=params)
    if response.status_code == 200:
        return response.json()
    else:
        raise Exception(f"Error checking IP: {response.status_code} {response.text}")

app = Flask(__name__)

@app.route('/')
def home():
    return send_from_directory('', 'home.html')

@app.route('/search.html')
def search():
    return send_from_directory('', 'search.html')

@app.route('/result.html')
def result():
    return send_from_directory('', 'result.html')

@app.route('/mitigation.html')
def mitigation():
    return send_from_directory('', 'mitigation.html')

@app.route('/login.html')
def login():
    return send_from_directory('', 'login.html')

@app.route('/signin.html')
def signin():
    return send_from_directory('', 'signin.html')

@app.route('/css/<path:path>')
def send_css(path):
    return send_from_directory('css', path)

@app.route('/js/<path:path>')
def send_js(path):
    return send_from_directory('js', path)

@app.route('/api/search', methods=['POST'])
def search_api():
    search_type = request.form.get('searchType')
    result = {}

    try:
        if search_type == 'url':
            url = request.form.get('input')
            analysis_id = scan_url_vt(url)
            result = get_url_report_vt(analysis_id)
            # Extract malware types for URL scan
            malicious_results = result.get('data', {}).get('attributes', {}).get('last_analysis_results', {})
            malware_types = [res['result'] for res in malicious_results.values() if res['category'] == 'malicious']
            result['malware_types'] = malware_types
        elif search_type == 'ip':
            ip_address = request.form.get('input')
            result = check_ip_abuseipdb(ip_address)
            # Extract malware type for IP check
            if result.get('data', {}).get('abuseConfidenceScore', 0) > 0:
                result['malware_types'] = ["IP reported for malicious activity"]
            else:
                result['malware_types'] = []
        elif search_type == 'file':
            file = request.files['file']
            file_path = os.path.join('/tmp', file.filename)
            file.save(file_path)
            analysis_id = scan_file_vt(file_path)
            result = get_url_report_vt(analysis_id)
            os.remove(file_path)
            # Extract malware types for file scan
            malicious_results = result.get('data', {}).get('attributes', {}).get('last_analysis_results', {})
            malware_types = [res['result'] for res in malicious_results.values() if res['category'] == 'malicious']
            result['malware_types'] = malware_types

    except Exception as e:
        return jsonify({'error': str(e)}), 500

    return jsonify(result)

if __name__ == '__main__':
    app.run(debug=True)
